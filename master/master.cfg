# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("hsa-worker", "pspp4you",
                   max_builds=1)]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://git.savannah.gnu.org/git/pspp.git',
        workdir='gitpoller-workdir', branch='master',
        pollInterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["debian-buster-amd64",
                              "debian-sid-amd64",
                              "debian-sid-i386"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["debian-buster-amd64",
                              "opensuse",
                              "debian-sid-amd64",
                              "debian-sid-i386"]))

c['schedulers'].append(schedulers.Nightly(
                            name='nightly',
                            builderNames=['opensuse',"debian-sid-amd64"],
                            hour=4, minute=8))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='https://git.savannah.gnu.org/git/pspp.git', mode='full'))
# run the tests (note that this will require that 'trial' is installed)
#factory.addStep(steps.ShellCommand(command=["make", "-f", "Smake"],
#                                   haltOnFailure=True))

# Assume the lxc container debian-buster exists
factory.addStep(steps.ShellCommand(
   command=["/home/buildbot/pspp-buildbot/run_debian.sh","buster","amd64"],
   usePTY=True, haltOnFailure=False))
factory.addStep(steps.ShellCommand(
   name="make check",
   command=["/home/buildbot/pspp-buildbot/run_tests.sh", "debian-buster-amd64-build"],
   usePTY=True, haltOnFailure=False))
# Retrieve the pspp test results
factory.addStep(steps.ShellCommand(
   name="Test Results",
   command=["/home/buildbot/pspp-buildbot/get_test_results.sh","debian-buster-amd64-build"],
   logfiles={"testsuite.log": "testsuite.log"},
   haltOnFailure=False))
# Stop and delete the build vm
factory.addStep(steps.ShellCommand(command=["lxc-stop", "debian-buster-amd64-build"]))
factory.addStep(steps.ShellCommand(command=["lxc-destroy", "debian-buster-amd64-build"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="debian-buster-amd64",
      workernames=["hsa-worker"],
      factory=factory))

###### OPENSUSE builder

factory = util.BuildFactory()
# The git repository is not used because I retrieve the code in the
# lxc container. I add it here because it provides the git revision
# The actual build is made from Bens nightly - so maybe wrong git rev
factory.addStep(steps.Git(repourl='https://git.savannah.gnu.org/git/pspp.git', mode='full'))

factory.addStep(steps.ShellCommand(command=["/home/buildbot/pspp-buildbot/run_suse.sh"], usePTY=True, haltOnFailure=False))
factory.addStep(steps.ShellCommand(
   name="make check",
   command=["/home/buildbot/pspp-buildbot/run_tests.sh", "vm2"],
   usePTY=True, haltOnFailure=False))
# Retrieve the pspp test results
factory.addStep(steps.ShellCommand(
   name="Test Results",
   command=["/home/buildbot/pspp-buildbot/get_test_results.sh","vm2"],
   logfiles={"testsuite.log": "testsuite.log"},
   haltOnFailure=False))
# Stop and delete the build vm
factory.addStep(steps.ShellCommand(command=["lxc-stop", "vm2"]))
factory.addStep(steps.ShellCommand(command=["lxc-destroy", "vm2"]))

c['builders'].append(
    util.BuilderConfig(name="opensuse",
      workernames=["hsa-worker"],
      factory=factory))

##### BUILDER: debian-sid-amd64

factory = util.BuildFactory()
# The git repository is not used because I retrieve the code in the
# lxc container. I add it here because it provides the git revision for buildbot.
# Otherwise the nightly builds are shown with "unknown revision"
factory.addStep(steps.Git(repourl='https://git.savannah.gnu.org/git/pspp.git', mode='full'))

factory.addStep(steps.ShellCommand(
   name="build",
   command=["/home/buildbot/pspp-buildbot/run_debian.sh","sid","amd64"],
   usePTY=True, haltOnFailure=False))
factory.addStep(steps.ShellCommand(
   name="make check",
   command=["/home/buildbot/pspp-buildbot/run_tests.sh", "debian-sid-amd64-build"],
   usePTY=True, haltOnFailure=False))
# Retrieve the pspp test results
factory.addStep(steps.ShellCommand(
   name="Test Results",
   command=["/home/buildbot/pspp-buildbot/get_test_results.sh","debian-sid-amd64-build"],
   logfiles={"testsuite.log": "testsuite.log"},
   haltOnFailure=False))
# Stop and delete the build vm
factory.addStep(steps.ShellCommand(command=["lxc-stop", "debian-sid-amd64-build"]))
factory.addStep(steps.ShellCommand(command=["lxc-destroy", "debian-sid-amd64-build"]))

c['builders'].append(
    util.BuilderConfig(name="debian-sid-amd64",
      workernames=["hsa-worker"],
      factory=factory))

##### BUILDER: debian-sid-i386

factory = util.BuildFactory()
factory.addStep(steps.Git(repourl='https://git.savannah.gnu.org/git/pspp.git', mode='full'))
factory.addStep(steps.ShellCommand(
   name="build",
   command=["/home/buildbot/pspp-buildbot/run_debian.sh","sid","i386"],
   usePTY=True, haltOnFailure=False))
factory.addStep(steps.ShellCommand(
   name="make check",
   command=["/home/buildbot/pspp-buildbot/run_tests.sh", "debian-sid-i386-build"],
   usePTY=True, haltOnFailure=False))
# Retrieve the pspp test results
factory.addStep(steps.ShellCommand(
   name="Test Results",
   command=["/home/buildbot/pspp-buildbot/get_test_results.sh","debian-sid-i386-build"],
   logfiles={"testsuite.log": "testsuite.log"},
   haltOnFailure=False))
# Stop and delete the build vm
factory.addStep(steps.ShellCommand(command=["lxc-stop", "debian-sid-i386-build"]))
factory.addStep(steps.ShellCommand(command=["lxc-destroy", "debian-sid-i386-build"]))

c['builders'].append(
    util.BuilderConfig(name="debian-sid-i386",
      workernames=["hsa-worker"],
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

from buildbot.plugins import reporters

mn = reporters.MailNotifier(fromaddr="buildbot@pspp.org",
                            sendToInterestedUsers=False,
                            extraRecipients=["friedrich.beckmann@gmx.de"],
                            relayhost="smtp.hs-augsburg.de")

c['services'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "GNU pspp CI"
c['titleURL'] = "https://savannah.gnu.org/projects/pspp/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://caeis.etech.fh-augsburg.de:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}, badges={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}

######## Analysis for the buildbot folks

c['buildbotNetUsageData'] = 'full'
